{"ast":null,"code":"var _jsxFileName = \"/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-1/movies/src/components/actorDetails/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Chip from \"@mui/material/Chip\";\nimport Paper from \"@mui/material/Paper\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\nimport MonetizationIcon from \"@mui/icons-material/MonetizationOn\";\nimport StarRate from \"@mui/icons-material/StarRate\";\nimport Typography from \"@mui/material/Typography\";\nimport MovieCard from \"../movieCard\";\nimport { getActorMovies } from \"../../api/tmdb-api\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = {\n  display: \"flex\",\n  // Arrange chips in a flexible row layout.\n  justifyContent: \"center\",\n  // Center-align the chips.\n  flexWrap: \"wrap\",\n  // Wrap chips to the next row if necessary.\n  listStyle: \"none\",\n  // Remove default list styling.\n  padding: 1.5,\n  // Add padding inside the container.\n  margin: 0 // Remove default external margins.\n};\nconst ActorDetails = ({\n  actor\n}) => {\n  const [movies, setMovies] = useState([]); // State for storing the actor's movies.\n\n  useEffect(() => {\n    // Fetch movies in which the actor appears.\n    const fetchActorMovies = async () => {\n      try {\n        const data = await getActorMovies(actor.id); // Fetch movie data using the actor's ID.\n        setMovies(data.cast.slice(0, 10)); // Store up to 10 movies in the state.\n      } catch (error) {\n        console.error(\"Error fetching actor movies:\", error); // Log any errors during fetch.\n      }\n    };\n    fetchActorMovies(); // Call the function on component mount or when actor ID changes.\n  }, [actor.id]); // Re-run the effect only if actor ID changes.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      component: \"h3\",\n      children: \"Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      component: \"p\",\n      children: [actor.biography || \"No biography available.\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      component: \"ul\",\n      sx: {\n        ...root\n      },\n      children: /*#__PURE__*/_jsxDEV(Chip, {\n        icon: /*#__PURE__*/_jsxDEV(StarRate, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this) // Add an icon.\n        ,\n        label: `Known for: ${actor.known_for_department || \"N/A\"}` // Actor's main field of work.\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      component: \"ul\",\n      sx: {\n        ...root\n      },\n      children: [/*#__PURE__*/_jsxDEV(Chip, {\n        icon: /*#__PURE__*/_jsxDEV(AccessTimeIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this) // Icon for time-related data.\n        ,\n        label: `Born: ${actor.birthday || \"N/A\"}` // Actor's birth date.\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chip, {\n        icon: /*#__PURE__*/_jsxDEV(MonetizationIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this) // Icon for revenue.\n        ,\n        label: `Net Worth: ${actor.revenue ? actor.revenue.toLocaleString() : \"N/A\" // Format revenue if available.\n        }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chip, {\n        icon: /*#__PURE__*/_jsxDEV(StarRate, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this) // Icon for rating-related data.\n        ,\n        label: `Vote Average: ${actor.popularity || \"N/A\"}` // Actor's popularity.\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      component: \"h3\",\n      sx: {\n        marginTop: 2\n      },\n      children: \"Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      component: \"ul\",\n      sx: {\n        ...root\n      },\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), \" \"]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\nexport default ActorDetails;","map":{"version":3,"names":["React","useState","useEffect","Chip","Paper","AccessTimeIcon","MonetizationIcon","StarRate","Typography","MovieCard","getActorMovies","jsxDEV","_jsxDEV","Fragment","_Fragment","root","display","justifyContent","flexWrap","listStyle","padding","margin","ActorDetails","actor","movies","setMovies","fetchActorMovies","data","id","cast","slice","error","console","children","variant","component","fileName","_jsxFileName","lineNumber","columnNumber","biography","sx","icon","label","known_for_department","birthday","revenue","toLocaleString","popularity","marginTop","map","movie"],"sources":["/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-1/movies/src/components/actorDetails/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Chip from \"@mui/material/Chip\";\nimport Paper from \"@mui/material/Paper\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\nimport MonetizationIcon from \"@mui/icons-material/MonetizationOn\";\nimport StarRate from \"@mui/icons-material/StarRate\";\nimport Typography from \"@mui/material/Typography\";\nimport MovieCard from \"../movieCard\";\nimport { getActorMovies } from \"../../api/tmdb-api\";\n\nconst root = {\n  display: \"flex\", // Arrange chips in a flexible row layout.\n  justifyContent: \"center\", // Center-align the chips.\n  flexWrap: \"wrap\", // Wrap chips to the next row if necessary.\n  listStyle: \"none\", // Remove default list styling.\n  padding: 1.5, // Add padding inside the container.\n  margin: 0, // Remove default external margins.\n};\n\nconst ActorDetails = ({ actor }) => {\n  const [movies, setMovies] = useState([]); // State for storing the actor's movies.\n\n  useEffect(() => {\n    // Fetch movies in which the actor appears.\n    const fetchActorMovies = async () => {\n      try {\n        const data = await getActorMovies(actor.id); // Fetch movie data using the actor's ID.\n        setMovies(data.cast.slice(0, 10)); // Store up to 10 movies in the state.\n      } catch (error) {\n        console.error(\"Error fetching actor movies:\", error); // Log any errors during fetch.\n      }\n    };\n\n    fetchActorMovies(); // Call the function on component mount or when actor ID changes.\n  }, [actor.id]); // Re-run the effect only if actor ID changes.\n\n  return (\n    <>\n      {/* Overview Section */}\n      <Typography variant=\"h5\" component=\"h3\">\n        Overview\n      </Typography>\n      <Typography variant=\"h6\" component=\"p\">\n        {actor.biography || \"No biography available.\"} {/* Actor's biography */}\n      </Typography>\n\n      {/* Known For Section */}\n      <Paper component=\"ul\" sx={{ ...root }}>\n        <Chip\n          icon={<StarRate />} // Add an icon.\n          label={`Known for: ${actor.known_for_department || \"N/A\"}`} // Actor's main field of work.\n        />\n      </Paper>\n\n      {/* Additional Details Section */}\n      <Paper component=\"ul\" sx={{ ...root }}>\n        <Chip\n          icon={<AccessTimeIcon />} // Icon for time-related data.\n          label={`Born: ${actor.birthday || \"N/A\"}`} // Actor's birth date.\n        />\n        <Chip\n          icon={<MonetizationIcon />} // Icon for revenue.\n          label={`Net Worth: ${\n            actor.revenue ? actor.revenue.toLocaleString() : \"N/A\" // Format revenue if available.\n          }`}\n        />\n        <Chip\n          icon={<StarRate />} // Icon for rating-related data.\n          label={`Vote Average: ${actor.popularity || \"N/A\"}`} // Actor's popularity.\n        />\n      </Paper>\n\n      {/* Movies Section */}\n      <Typography variant=\"h6\" component=\"h3\" sx={{ marginTop: 2 }}>\n        Movies\n      </Typography>\n      <Paper component=\"ul\" sx={{ ...root }}>\n        {movies.map((movie) => (\n          <li key={movie.id}> {/* Use a unique key for each movie. */}\n            <MovieCard movie={movie} /> {/* Render MovieCard component for each movie. */}\n          </li>\n        ))}\n      </Paper>\n    </>\n  );\n};\n\nexport default ActorDetails;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}