{"ast":null,"code":"export const getMovies = (page = 1) => {\n  return fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&include_adult=false&include_video=false&page=${page}`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\n\n//Setting page = 1 as a default makes sure the function fetches the first page of results if no page number is given.\n// It keeps things simple and ensures pagination works smoothly when navigating through different pages.\n\nexport const getMovie = args => {\n  const [, idPart] = args.queryKey;\n  const {\n    id\n  } = idPart;\n  return fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.REACT_APP_TMDB_KEY}`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\nexport const getGenres = () => {\n  return fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).then(data => data.genres).catch(error => {\n    throw error;\n  });\n};\nexport const getMovieImages = ({\n  queryKey\n}) => {\n  const [, idPart] = queryKey;\n  const {\n    id\n  } = idPart;\n  return fetch(`https://api.themoviedb.org/3/movie/${id}/images?api_key=${process.env.REACT_APP_TMDB_KEY}`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\nexport const getMovieReviews = async ({\n  queryKey\n}) => {\n  const [, {\n    id\n  }] = queryKey;\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${process.env.REACT_APP_TMDB_KEY}`);\n    const data = await response.json();\n    if (response.ok) {\n      return data.results || [];\n    }\n    throw new Error(data.status_message || \"Something went wrong\");\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getUpcomingMovies = (page = 1) => {\n  return fetch(`https://api.themoviedb.org/3/movie/upcoming?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=${page}`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\nexport const getActors = () => {\n  return fetch(`https://api.themoviedb.org/3/person/popular?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).then(data => data.results).catch(error => {\n    throw error;\n  });\n};\nexport const getActor = args => {\n  const [, idPart] = args.queryKey;\n  const {\n    id\n  } = idPart;\n  return fetch(`https://api.themoviedb.org/3/person/${id}?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US`).then(response => {\n    if (!response.ok) {\n      throw new Error(response.json().message);\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\nexport const getActorImages = id => {\n  return fetch(`https://api.themoviedb.org/3/person/${id}/images?api_key=${process.env.REACT_APP_TMDB_KEY}`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\nexport const getMovieCredits = movieId => {\n  return fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${process.env.REACT_APP_TMDB_KEY}`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\nexport const getActorMovies = actorId => {\n  return fetch(`https://api.themoviedb.org/3/person/${actorId}/movie_credits?api_key=${process.env.REACT_APP_TMDB_KEY}`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\nexport const getTopMovies = (page = 1) => {\n  return fetch(`https://api.themoviedb.org/3/movie/top_rated?language=en-US&page=${page}&api_key=${process.env.REACT_APP_TMDB_KEY}`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\nexport const searchActorsByName = name => {\n  return fetch(`https://api.themoviedb.org/3/search/person?api_key=${process.env.REACT_APP_TMDB_KEY}&query=${name}`).then(response => {\n    if (!response.ok) {\n      return response.json().then(error => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};","map":{"version":3,"names":["getMovies","page","fetch","process","env","REACT_APP_TMDB_KEY","then","response","ok","json","error","Error","status_message","catch","getMovie","args","idPart","queryKey","id","getGenres","data","genres","getMovieImages","getMovieReviews","results","getUpcomingMovies","getActors","getActor","message","getActorImages","getMovieCredits","movieId","getActorMovies","actorId","getTopMovies","searchActorsByName","name"],"sources":["/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-1/movies/src/api/tmdb-api.js"],"sourcesContent":["export const getMovies = (page = 1) => {\n  return fetch(\n    `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&include_adult=false&include_video=false&page=${page}`\n  )\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then((error) => {\n          throw new Error(error.status_message || \"Something went wrong\");\n        });\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      throw error;\n    });\n};\n\n//Setting page = 1 as a default makes sure the function fetches the first page of results if no page number is given.\n// It keeps things simple and ensures pagination works smoothly when navigating through different pages.\n\n\nexport const getMovie = (args) => {\n  const [, idPart] = args.queryKey;\n  const { id } = idPart;\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.REACT_APP_TMDB_KEY}`\n  ).then((response) => {\n    if (!response.ok) {\n      return response.json().then((error) => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  })\n  .catch((error) => {\n    throw error;\n  });\n};\n\nexport const getGenres = () => {\n  return fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US`\n  )\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then((error) => {\n          throw new Error(error.status_message || \"Something went wrong\");\n        });\n      }\n      return response.json();\n    })\n    .then((data) => data.genres)\n    .catch((error) => {\n      throw error;\n    });\n};\n\n\nexport const getMovieImages = ({ queryKey }) => {\n  const [, idPart] = queryKey;\n  const { id } = idPart;\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/images?api_key=${process.env.REACT_APP_TMDB_KEY}`\n  ).then((response) => {\n    if (!response.ok) {\n      return response.json().then((error) => {\n        throw new Error(error.status_message || \"Something went wrong\");\n      });\n    }\n    return response.json();\n  })\n  .catch((error) => {\n    throw error;\n  });\n};\n\nexport const getMovieReviews = async ({ queryKey }) => {\n  const [, { id }] = queryKey;\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${process.env.REACT_APP_TMDB_KEY}`\n    );\n    const data = await response.json();\n    if (response.ok) {\n      return data.results || [];\n    }\n    throw new Error(data.status_message || \"Something went wrong\");\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getUpcomingMovies = (page = 1) => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/upcoming?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=${page}`\n  )\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then((error) => {\n          throw new Error(error.status_message || \"Something went wrong\");\n        });\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      throw error;\n    });\n};\n\n\n\nexport const getActors = () => {\n  return fetch(\n    `https://api.themoviedb.org/3/person/popular?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1`\n  )\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then((error) => {\n          throw new Error(error.status_message || \"Something went wrong\");\n        });\n      }\n      return response.json();\n    })\n    .then((data) => data.results)\n    .catch((error) => {\n      throw error;\n    });\n};\n\nexport const getActor = (args) => {\n  const [, idPart] = args.queryKey;\n  const { id } = idPart;\n  return fetch(\n    `https://api.themoviedb.org/3/person/${id}?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US`\n  ).then((response) => {\n    if (!response.ok) {\n      throw new Error(response.json().message);\n    }\n    return response.json();\n  })\n  .catch((error) => {\n      throw error\n  });\n};\n\n\nexport const getActorImages = (id) => {\n  return fetch(\n    `https://api.themoviedb.org/3/person/${id}/images?api_key=${process.env.REACT_APP_TMDB_KEY}`\n  )\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then((error) => {\n          throw new Error(error.status_message || \"Something went wrong\");\n        });\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      throw error;\n    });\n};\n\nexport const getMovieCredits = (movieId) => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${process.env.REACT_APP_TMDB_KEY}`\n  )\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then((error) => {\n          throw new Error(error.status_message || \"Something went wrong\");\n        });\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      throw error;\n    });\n};\n\nexport const getActorMovies = (actorId) => {\n  return fetch(\n    `https://api.themoviedb.org/3/person/${actorId}/movie_credits?api_key=${process.env.REACT_APP_TMDB_KEY}`\n  )\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then((error) => {\n          throw new Error(error.status_message || \"Something went wrong\");\n        });\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      throw error;\n    });\n};\n\nexport const getTopMovies = (page = 1) => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/top_rated?language=en-US&page=${page}&api_key=${process.env.REACT_APP_TMDB_KEY}`\n  )\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then((error) => {\n          throw new Error(error.status_message || \"Something went wrong\");\n        });\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      throw error;\n    });\n};\n\n\nexport const searchActorsByName = (name) => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/person?api_key=${process.env.REACT_APP_TMDB_KEY}&query=${name}`\n  )\n    .then((response) => {\n      if (!response.ok) {\n        return response.json().then((error) => {\n          throw new Error(error.status_message || \"Something went wrong\");\n        });\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      throw error;\n    });\n};\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}