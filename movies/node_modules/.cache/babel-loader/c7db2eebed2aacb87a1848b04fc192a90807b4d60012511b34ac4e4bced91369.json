{"ast":null,"code":"var _jsxFileName = \"/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA/movies/src/pages/watchlistPage.js\";\nimport React, { useContext } from \"react\";\nimport PageTemplate from \"../components/templateMovieListPage\";\nimport { MoviesContext } from \"../contexts/movieContext\";\nimport { useQueries } from \"react-query\";\nimport { getMovie } from \"../api/tmdb-api\";\nimport Spinner from '../components/spinner';\nimport WriteReview from \"../components/cardIcons/writeReview\";\nimport RemoveFromWatchlist from \"../components/cardIcons/removeFromWatchlist\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WatchlistPage = () => {\n  const {\n    watchlists: movieIds\n  } = useContext(MoviesContext);\n  const watchlistMovieQueries = useQueries(movieIds.map(movieId => {\n    return {\n      queryKey: [\"movie\", {\n        id: movieId\n      }],\n      queryFn: getMovie\n    };\n  }));\n  const isLoading = watchlistMovieQueries.find(m => m.isLoading === true);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n  const movies = watchlistMovieQueries.map(q => {\n    q.data.genre_ids = q.data.genres.map(g => g.id);\n    return q.data;\n  });\n  return /*#__PURE__*/_jsxDEV(PageTemplate, {\n    title: \"WatchList\",\n    movies: movies,\n    action: movie => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"removeFromWatchlist\", {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(WriteReview, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\nexport default WatchlistPage;","map":{"version":3,"names":["React","useContext","PageTemplate","MoviesContext","useQueries","getMovie","Spinner","WriteReview","RemoveFromWatchlist","jsxDEV","_jsxDEV","Fragment","_Fragment","WatchlistPage","watchlists","movieIds","watchlistMovieQueries","map","movieId","queryKey","id","queryFn","isLoading","find","m","fileName","_jsxFileName","lineNumber","columnNumber","movies","q","data","genre_ids","genres","g","title","action","movie","children"],"sources":["/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA/movies/src/pages/watchlistPage.js"],"sourcesContent":["import React, {useContext} from \"react\";\nimport PageTemplate from \"../components/templateMovieListPage\";\nimport {MoviesContext} from \"../contexts/movieContext\";\nimport {useQueries} from \"react-query\";\nimport {getMovie} from \"../api/tmdb-api\";\nimport Spinner from '../components/spinner'\nimport WriteReview from \"../components/cardIcons/writeReview\";\nimport RemoveFromWatchlist from \"../components/cardIcons/removeFromWatchlist\";\n\n\n\nconst WatchlistPage = () => {\n    const {watchlists: movieIds } = useContext(MoviesContext);\n\n    const watchlistMovieQueries = useQueries(\n        movieIds.map((movieId) => {\n            return {\n                queryKey: [\"movie\", { id: movieId }],\n                queryFn: getMovie,\n            };\n        })\n    );\n    const isLoading = watchlistMovieQueries.find((m) => m.isLoading === true);\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    const movies = watchlistMovieQueries.map((q) => {\n        q.data.genre_ids = q.data.genres.map(g => g.id)\n        return q.data\n    });\n\n\n    return (\n        <PageTemplate\n            title=\"WatchList\"\n            movies={movies}\n            action={(movie) => {\n                return (\n                    <>\n                        <removeFromWatchlist movie={movie} />\n                        <WriteReview movie={movie} />\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default WatchlistPage;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,UAAU,QAAO,OAAO;AACvC,OAAOC,YAAY,MAAM,qCAAqC;AAC9D,SAAQC,aAAa,QAAO,0BAA0B;AACtD,SAAQC,UAAU,QAAO,aAAa;AACtC,SAAQC,QAAQ,QAAO,iBAAiB;AACxC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,WAAW,MAAM,qCAAqC;AAC7D,OAAOC,mBAAmB,MAAM,6CAA6C;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAI9E,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACxB,MAAM;IAACC,UAAU,EAAEC;EAAS,CAAC,GAAGd,UAAU,CAACE,aAAa,CAAC;EAEzD,MAAMa,qBAAqB,GAAGZ,UAAU,CACpCW,QAAQ,CAACE,GAAG,CAAEC,OAAO,IAAK;IACtB,OAAO;MACHC,QAAQ,EAAE,CAAC,OAAO,EAAE;QAAEC,EAAE,EAAEF;MAAQ,CAAC,CAAC;MACpCG,OAAO,EAAEhB;IACb,CAAC;EACL,CAAC,CACL,CAAC;EACD,MAAMiB,SAAS,GAAGN,qBAAqB,CAACO,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACF,SAAS,KAAK,IAAI,CAAC;EAEzE,IAAIA,SAAS,EAAE;IACX,oBAAOZ,OAAA,CAACJ,OAAO;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtB;EAEA,MAAMC,MAAM,GAAGb,qBAAqB,CAACC,GAAG,CAAEa,CAAC,IAAK;IAC5CA,CAAC,CAACC,IAAI,CAACC,SAAS,GAAGF,CAAC,CAACC,IAAI,CAACE,MAAM,CAAChB,GAAG,CAACiB,CAAC,IAAIA,CAAC,CAACd,EAAE,CAAC;IAC/C,OAAOU,CAAC,CAACC,IAAI;EACjB,CAAC,CAAC;EAGF,oBACIrB,OAAA,CAACR,YAAY;IACTiC,KAAK,EAAC,WAAW;IACjBN,MAAM,EAAEA,MAAO;IACfO,MAAM,EAAGC,KAAK,IAAK;MACf,oBACI3B,OAAA,CAAAE,SAAA;QAAA0B,QAAA,gBACI5B,OAAA;UAAqB2B,KAAK,EAAEA;QAAM;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACrClB,OAAA,CAACH,WAAW;UAAC8B,KAAK,EAAEA;QAAM;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,eAC/B,CAAC;IAEX;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAED,eAAef,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}