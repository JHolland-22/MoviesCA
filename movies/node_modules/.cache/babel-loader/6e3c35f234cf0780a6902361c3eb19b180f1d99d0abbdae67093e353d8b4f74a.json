{"ast":null,"code":"var _jsxFileName = \"/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-4/movies/src/pages/actorListPage.js\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PageTemplate from \"../components/templateActorListPage\";\nimport { getActors } from \"../api/tmdb-api\";\nimport { useQuery } from \"react-query\";\nimport Spinner from \"../components/spinner\";\nimport ActorDetails from \"../components/actorDetails\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ActorPage = () => {\n  // Get the actor ID from the URL parameters using useParams\n  const {\n    id\n  } = useParams();\n\n  // Fetch actor data using react-query's useQuery hook\n  const {\n    data: actor,\n    error,\n    isLoading,\n    isError\n  } = useQuery([\"actor\", {\n    id: id\n  }],\n  // Unique query key with actor id\n  getActors // Function to fetch actor data from the API\n  );\n\n  // If the data is still loading, show a spinner\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If there was an error fetching the data, display the error message\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: actor ?\n    /*#__PURE__*/\n    // If actor data is available, render the PageTemplate and ActorDetails\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(PageTemplate, {\n        title: \"Discover Actors\",\n        actor: actor,\n        children: /*#__PURE__*/_jsxDEV(ActorDetails, {\n          actor: actor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) :\n    /*#__PURE__*/\n    // If actor data is not available yet, show a waiting message\n    _jsxDEV(\"p\", {\n      children: \"Waiting for actor details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\nexport default ActorPage;","map":{"version":3,"names":["React","useParams","PageTemplate","getActors","useQuery","Spinner","ActorDetails","jsxDEV","_jsxDEV","Fragment","_Fragment","ActorPage","id","data","actor","error","isLoading","isError","fileName","_jsxFileName","lineNumber","columnNumber","children","message","title"],"sources":["/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-4/movies/src/pages/actorListPage.js"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PageTemplate from \"../components/templateActorListPage\";\nimport { getActors } from \"../api/tmdb-api\";\nimport { useQuery } from \"react-query\";\nimport Spinner from \"../components/spinner\";\nimport ActorDetails from \"../components/actorDetails\";\n\nconst ActorPage = () => {\n  // Get the actor ID from the URL parameters using useParams\n  const { id } = useParams();\n\n  // Fetch actor data using react-query's useQuery hook\n  const { data: actor, error, isLoading, isError } = useQuery(\n    [\"actor\", { id: id }], // Unique query key with actor id\n    getActors // Function to fetch actor data from the API\n  );\n\n  // If the data is still loading, show a spinner\n  if (isLoading) {\n    return <Spinner />;\n  }\n\n  // If there was an error fetching the data, display the error message\n  if (isError) {\n    return <h1>{error.message}</h1>;\n  }\n\n  return (\n    <>\n      {actor ? (\n        // If actor data is available, render the PageTemplate and ActorDetails\n        <>\n          <PageTemplate title=\"Discover Actors\" actor={actor}>\n            <ActorDetails actor={actor} />\n          </PageTemplate>\n        </>\n      ) : (\n        // If actor data is not available yet, show a waiting message\n        <p>Waiting for actor details</p>\n      )}\n    </>\n  );\n};\n\nexport default ActorPage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,YAAY,MAAM,qCAAqC;AAC9D,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,YAAY,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGX,SAAS,CAAC,CAAC;;EAE1B;EACA,MAAM;IAAEY,IAAI,EAAEC,KAAK;IAAEC,KAAK;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGb,QAAQ,CACzD,CAAC,OAAO,EAAE;IAAEQ,EAAE,EAAEA;EAAG,CAAC,CAAC;EAAE;EACvBT,SAAS,CAAC;EACZ,CAAC;;EAED;EACA,IAAIa,SAAS,EAAE;IACb,oBAAOR,OAAA,CAACH,OAAO;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpB;;EAEA;EACA,IAAIJ,OAAO,EAAE;IACX,oBAAOT,OAAA;MAAAc,QAAA,EAAKP,KAAK,CAACQ;IAAO;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjC;EAEA,oBACEb,OAAA,CAAAE,SAAA;IAAAY,QAAA,EACGR,KAAK;IAAA;IACJ;IACAN,OAAA,CAAAE,SAAA;MAAAY,QAAA,eACEd,OAAA,CAACN,YAAY;QAACsB,KAAK,EAAC,iBAAiB;QAACV,KAAK,EAAEA,KAAM;QAAAQ,QAAA,eACjDd,OAAA,CAACF,YAAY;UAACQ,KAAK,EAAEA;QAAM;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB;IAAC,gBACf,CAAC;IAAA;IAEH;IACAb,OAAA;MAAAc,QAAA,EAAG;IAAyB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAChC,gBACD,CAAC;AAEP,CAAC;AAED,eAAeV,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}