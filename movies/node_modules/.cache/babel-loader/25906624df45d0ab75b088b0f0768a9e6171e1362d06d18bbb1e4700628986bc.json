{"ast":null,"code":"var _jsxFileName = \"/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-1/movies/src/pages/actorListPage.js\";\nimport React, { useContext } from \"react\";\nimport PageTemplate from \"../components/templateActorListPage\";\nimport { ActorsContext } from \"../contexts/actorsContext\";\nimport { useQueries } from \"react-query\";\nimport { getActor } from \"../api/tmdb-api\";\nimport Spinner from '../components/spinner';\nimport RemoveFromFavoriteActors from \"../components/cardIcons/removeFromFavoriteActors\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FavoriteActorsPage = () => {\n  const {\n    favoriteActors: actorIds\n  } = useContext(ActorsContext);\n\n  // Create an array of queries and run in parallel.\n  const favoriteActorQueries = useQueries(actorIds.map(actorId => {\n    return {\n      queryKey: [\"actor\", {\n        id: actorId\n      }],\n      queryFn: getActor\n    };\n  }));\n  // Check if any of the parallel queries is still loading.\n  const isLoading = favoriteActorQueries.find(m => m.isLoading === true);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  const actors = favoriteActorQueries.map(q => {\n    return q.data;\n  });\n  const toDo = () => true;\n  return /*#__PURE__*/_jsxDEV(PageTemplate, {\n    title: \"Favorite Actors\",\n    actors: actors,\n    action: actor => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(RemoveFromFavoriteActors, {\n          actor: actor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\nexport default FavoriteActorsPage;","map":{"version":3,"names":["React","useContext","PageTemplate","ActorsContext","useQueries","getActor","Spinner","RemoveFromFavoriteActors","jsxDEV","_jsxDEV","Fragment","_Fragment","FavoriteActorsPage","favoriteActors","actorIds","favoriteActorQueries","map","actorId","queryKey","id","queryFn","isLoading","find","m","fileName","_jsxFileName","lineNumber","columnNumber","actors","q","data","toDo","title","action","actor","children"],"sources":["/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-1/movies/src/pages/actorListPage.js"],"sourcesContent":["\nimport React, { useContext } from \"react\";\nimport PageTemplate from \"../components/templateActorListPage\";\nimport { ActorsContext } from \"../contexts/actorsContext\";\nimport { useQueries } from \"react-query\";\nimport { getActor } from \"../api/tmdb-api\";\nimport Spinner from '../components/spinner';\nimport RemoveFromFavoriteActors from \"../components/cardIcons/removeFromFavoriteActors\";\n\nconst FavoriteActorsPage = () => {\n  const {favoriteActors: actorIds } = useContext(ActorsContext);\n\n  // Create an array of queries and run in parallel.\n  const favoriteActorQueries = useQueries(\n    actorIds.map((actorId) => {\n      return {\n        queryKey: [\"actor\", { id: actorId }],\n        queryFn: getActor,\n      };\n    })\n  );\n  // Check if any of the parallel queries is still loading.\n  const isLoading = favoriteActorQueries.find((m) => m.isLoading === true);\n\n  if (isLoading) {\n    return <Spinner />;\n  }\n\n  const actors = favoriteActorQueries.map((q) => {\n    return q.data\n  });\n\n  const toDo = () => true;\n\n  return (\n    <PageTemplate\n      title=\"Favorite Actors\"\n      actors={actors}\n      action={(actor) => {\n        return (\n          <>\n            <RemoveFromFavoriteActors actor={actor} />\n          </>\n        );\n      }}\n    />\n  );\n};\n\nexport default FavoriteActorsPage;\n"],"mappings":";AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,YAAY,MAAM,qCAAqC;AAC9D,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,UAAU,QAAQ,aAAa;AACxC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,wBAAwB,MAAM,kDAAkD;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExF,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,MAAM;IAACC,cAAc,EAAEC;EAAS,CAAC,GAAGb,UAAU,CAACE,aAAa,CAAC;;EAE7D;EACA,MAAMY,oBAAoB,GAAGX,UAAU,CACrCU,QAAQ,CAACE,GAAG,CAAEC,OAAO,IAAK;IACxB,OAAO;MACLC,QAAQ,EAAE,CAAC,OAAO,EAAE;QAAEC,EAAE,EAAEF;MAAQ,CAAC,CAAC;MACpCG,OAAO,EAAEf;IACX,CAAC;EACH,CAAC,CACH,CAAC;EACD;EACA,MAAMgB,SAAS,GAAGN,oBAAoB,CAACO,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACF,SAAS,KAAK,IAAI,CAAC;EAExE,IAAIA,SAAS,EAAE;IACb,oBAAOZ,OAAA,CAACH,OAAO;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpB;EAEA,MAAMC,MAAM,GAAGb,oBAAoB,CAACC,GAAG,CAAEa,CAAC,IAAK;IAC7C,OAAOA,CAAC,CAACC,IAAI;EACf,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAGA,CAAA,KAAM,IAAI;EAEvB,oBACEtB,OAAA,CAACP,YAAY;IACX8B,KAAK,EAAC,iBAAiB;IACvBJ,MAAM,EAAEA,MAAO;IACfK,MAAM,EAAGC,KAAK,IAAK;MACjB,oBACEzB,OAAA,CAAAE,SAAA;QAAAwB,QAAA,eACE1B,OAAA,CAACF,wBAAwB;UAAC2B,KAAK,EAAEA;QAAM;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,gBAC1C,CAAC;IAEP;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAED,eAAef,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}