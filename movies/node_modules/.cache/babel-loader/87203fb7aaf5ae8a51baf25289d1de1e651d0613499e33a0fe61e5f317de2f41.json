{"ast":null,"code":"var _jsxFileName = \"/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/movies/src/pages/homePage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { getMovies, getGenres } from \"../api/tmdb-api\";\nimport PageTemplate from '../components/templateMovieListPage';\nimport { useQuery } from 'react-query';\nimport Spinner from '../components/spinner';\nimport AddToFavoritesIcon from '../components/cardIcons/addToFavorites';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  const [genres, setGenres] = useState([]);\n  const {\n    data,\n    error,\n    isLoading,\n    isError\n  } = useQuery('discover', getMovies);\n  useEffect(() => {\n    getGenres().then(response => {\n      if (Array.isArray(response)) {\n        setGenres(response);\n      } else {\n        console.error(\"Expected genres to be an array, but got:\", response);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching genres:\", error);\n    });\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  const movies = (data === null || data === void 0 ? void 0 : data.results) || [];\n  const getMovieGenres = movie => {\n    if (!genres || genres.length === 0 || !movie.genre_ids) {\n      return [];\n    }\n    return movie.genre_ids.map(genreId => genres.find(genre => genre.id === genreId)).filter(genre => genre);\n  };\n  return /*#__PURE__*/_jsxDEV(PageTemplate, {\n    title: \"Discover Movies\",\n    movies: movies,\n    action: movie => /*#__PURE__*/_jsxDEV(AddToFavoritesIcon, {\n      movie: movie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 26\n    }, this),\n    getGenresForMovie: getMovieGenres\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\nexport default HomePage;","map":{"version":3,"names":["React","useState","useEffect","getMovies","getGenres","PageTemplate","useQuery","Spinner","AddToFavoritesIcon","jsxDEV","_jsxDEV","HomePage","genres","setGenres","data","error","isLoading","isError","then","response","Array","isArray","console","catch","fileName","_jsxFileName","lineNumber","columnNumber","children","message","movies","results","getMovieGenres","movie","length","genre_ids","map","genreId","find","genre","id","filter","title","action","getGenresForMovie"],"sources":["/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/movies/src/pages/homePage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getMovies, getGenres } from \"../api/tmdb-api\";\nimport PageTemplate from '../components/templateMovieListPage';\nimport { useQuery } from 'react-query';\nimport Spinner from '../components/spinner';\nimport AddToFavoritesIcon from '../components/cardIcons/addToFavorites';\n\nconst HomePage = () => {\n  const [genres, setGenres] = useState([]);\n\n  const { data, error, isLoading, isError } = useQuery('discover', getMovies);\n\n  useEffect(() => {\n    getGenres().then((response) => {\n      if (Array.isArray(response)) {\n        setGenres(response);\n      } else {\n        console.error(\"Expected genres to be an array, but got:\", response);\n      }\n    }).catch((error) => {\n      console.error(\"Error fetching genres:\", error);\n    });\n  }, []);\n\n  if (isLoading) {\n    return <Spinner />;\n  }\n\n  if (isError) {\n    return <h1>{error.message}</h1>;\n  }\n\n  const movies = data?.results || [];\n\n  const getMovieGenres = (movie) => {\n    if (!genres || genres.length === 0 || !movie.genre_ids) {\n      return [];\n    }\n\n    return movie.genre_ids\n      .map((genreId) => genres.find((genre) => genre.id === genreId))\n      .filter((genre) => genre);\n  };\n\n  return (\n    <PageTemplate\n      title=\"Discover Movies\"\n      movies={movies}\n      action={(movie) => <AddToFavoritesIcon movie={movie} />}\n      getGenresForMovie={getMovieGenres}\n    />\n  );\n};\n\nexport default HomePage;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,SAAS,QAAQ,iBAAiB;AACtD,OAAOC,YAAY,MAAM,qCAAqC;AAC9D,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,kBAAkB,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAM;IAAEa,IAAI;IAAEC,KAAK;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGX,QAAQ,CAAC,UAAU,EAAEH,SAAS,CAAC;EAE3ED,SAAS,CAAC,MAAM;IACdE,SAAS,CAAC,CAAC,CAACc,IAAI,CAAEC,QAAQ,IAAK;MAC7B,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;QAC3BN,SAAS,CAACM,QAAQ,CAAC;MACrB,CAAC,MAAM;QACLG,OAAO,CAACP,KAAK,CAAC,0CAA0C,EAAEI,QAAQ,CAAC;MACrE;IACF,CAAC,CAAC,CAACI,KAAK,CAAER,KAAK,IAAK;MAClBO,OAAO,CAACP,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIC,SAAS,EAAE;IACb,oBAAON,OAAA,CAACH,OAAO;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpB;EAEA,IAAIV,OAAO,EAAE;IACX,oBAAOP,OAAA;MAAAkB,QAAA,EAAKb,KAAK,CAACc;IAAO;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjC;EAEA,MAAMG,MAAM,GAAG,CAAAhB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiB,OAAO,KAAI,EAAE;EAElC,MAAMC,cAAc,GAAIC,KAAK,IAAK;IAChC,IAAI,CAACrB,MAAM,IAAIA,MAAM,CAACsB,MAAM,KAAK,CAAC,IAAI,CAACD,KAAK,CAACE,SAAS,EAAE;MACtD,OAAO,EAAE;IACX;IAEA,OAAOF,KAAK,CAACE,SAAS,CACnBC,GAAG,CAAEC,OAAO,IAAKzB,MAAM,CAAC0B,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,EAAE,KAAKH,OAAO,CAAC,CAAC,CAC9DI,MAAM,CAAEF,KAAK,IAAKA,KAAK,CAAC;EAC7B,CAAC;EAED,oBACE7B,OAAA,CAACL,YAAY;IACXqC,KAAK,EAAC,iBAAiB;IACvBZ,MAAM,EAAEA,MAAO;IACfa,MAAM,EAAGV,KAAK,iBAAKvB,OAAA,CAACF,kBAAkB;MAACyB,KAAK,EAAEA;IAAM;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAE;IACxDiB,iBAAiB,EAAEZ;EAAe;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEN,CAAC;AAED,eAAehB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}