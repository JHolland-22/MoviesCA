{"ast":null,"code":"var _jsxFileName = \"/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-1/movies/src/components/templateActorPage/index.js\";\nimport React from \"react\";\nimport ActorHeader from \"../actorHeader\";\nimport Grid from \"@mui/material/Grid2\";\nimport ImageList from \"@mui/material/ImageList\";\nimport ImageListItem from \"@mui/material/ImageListItem\";\nimport { useQuery } from \"react-query\";\nimport Spinner from \"../spinner\";\nimport { getActorImages } from \"../../api/tmdb-api\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TemplateActorPage = ({\n  actor,\n  children\n}) => {\n  var _images$profiles;\n  // Fetch images of the actor using the react-query hook\n  const {\n    data: images = [],\n    error,\n    isLoading,\n    isError\n  } = useQuery([\"images\", {\n    id: actor.id\n  }], () => getActorImages(actor.id),\n  // Fetch images from the API using the actor's id\n  {\n    enabled: !!(actor !== null && actor !== void 0 && actor.id) // Only fetch images if actor id exists\n  });\n\n  // Return loading spinner while the images are being fetched\n  if (isLoading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 25\n  }, this);\n\n  // Return error message if there is an issue fetching images\n  if (isError) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: error.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ActorHeader, {\n      actor: actor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      style: {\n        padding: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        size: {\n          xs: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-around\"\n          },\n          children: /*#__PURE__*/_jsxDEV(ImageList, {\n            sx: {\n              height: \"100vh\" // Image list takes up full height of the viewport\n            },\n            cols: 1 // Display images in a single column\n            ,\n            children: (_images$profiles = images.profiles) === null || _images$profiles === void 0 ? void 0 : _images$profiles.map(image => /*#__PURE__*/_jsxDEV(ImageListItem, {\n              cols: 1,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://image.tmdb.org/t/p/w500/${image.file_path}` // Image URL from TMDB API\n                ,\n                alt: image.file_path // Alt text for accessibility\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 19\n              }, this)\n            }, image.file_path, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        size: {\n          xs: 9\n        },\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\nexport default TemplateActorPage;","map":{"version":3,"names":["React","ActorHeader","Grid","ImageList","ImageListItem","useQuery","Spinner","getActorImages","jsxDEV","_jsxDEV","Fragment","_Fragment","TemplateActorPage","actor","children","_images$profiles","data","images","error","isLoading","isError","id","enabled","fileName","_jsxFileName","lineNumber","columnNumber","message","container","spacing","style","padding","size","xs","sx","display","flexWrap","justifyContent","height","cols","profiles","map","image","src","file_path","alt"],"sources":["/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-1/movies/src/components/templateActorPage/index.js"],"sourcesContent":["import React from \"react\";\nimport ActorHeader from \"../actorHeader\";\nimport Grid from \"@mui/material/Grid2\";\nimport ImageList from \"@mui/material/ImageList\";\nimport ImageListItem from \"@mui/material/ImageListItem\";\nimport { useQuery } from \"react-query\";\nimport Spinner from \"../spinner\";\nimport { getActorImages } from \"../../api/tmdb-api\";\n\nconst TemplateActorPage = ({ actor, children }) => {\n  // Fetch images of the actor using the react-query hook\n  const { data: images = [], error, isLoading, isError } = useQuery(\n    [\"images\", { id: actor.id }],\n    () => getActorImages(actor.id), // Fetch images from the API using the actor's id\n    {\n      enabled: !!actor?.id, // Only fetch images if actor id exists\n    }\n  );\n\n  // Return loading spinner while the images are being fetched\n  if (isLoading) return <Spinner />;\n\n  // Return error message if there is an issue fetching images\n  if (isError) return <h1>{error.message}</h1>;\n\n  return (\n    <>\n      {/* ActorHeader component displays information about the actor */}\n      <ActorHeader actor={actor} />\n\n      {/* Grid layout to display the actor's images and additional content */}\n      <Grid container spacing={5} style={{ padding: \"15px\" }}>\n        <Grid size={{ xs: 3 }}>\n          {/* Container for actor's images */}\n          <div\n            sx={{\n              display: \"flex\",\n              flexWrap: \"wrap\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            <ImageList\n              sx={{\n                height: \"100vh\", // Image list takes up full height of the viewport\n              }}\n              cols={1} // Display images in a single column\n            >\n              {/* Loop through the fetched images and display them */}\n              {images.profiles?.map((image) => (\n                <ImageListItem key={image.file_path} cols={1}>\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500/${image.file_path}`} // Image URL from TMDB API\n                    alt={image.file_path} // Alt text for accessibility\n                  />\n                </ImageListItem>\n              ))}\n            </ImageList>\n          </div>\n        </Grid>\n        {/* Render any additional content passed as children */}\n        <Grid size={{ xs: 9 }}>{children}</Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default TemplateActorPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}