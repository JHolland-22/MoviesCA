{"ast":null,"code":"var _jsxFileName = \"/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA/movies/src/pages/actorDetailsPage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ActorDetails from \"../components/actorDetails\";\nimport PageTemplate from \"../components/templateActorPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActorDetailsPage = () => {\n  const {\n    id\n  } = useParams();\n  const [actor, setActor] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchActorDetails = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`https://api.themoviedb.org/3/person/${id}?api_key=${process.env.REACT_APP_TMDB_KEY}`);\n        if (!response.ok) throw new Error(\"Failed to fetch actor details\");\n        const actorData = await response.json();\n        setActor(actorData);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchActorDetails();\n  }, [id]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 21\n  }, this);\n  return actor ? /*#__PURE__*/_jsxDEV(PageTemplate, {\n    actor: actor,\n    children: /*#__PURE__*/_jsxDEV(ActorDetails, {\n      actor: actor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Waiting for actor details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\nexport default ActorDetailsPage;","map":{"version":3,"names":["React","useState","useEffect","useParams","ActorDetails","PageTemplate","jsxDEV","_jsxDEV","ActorDetailsPage","id","actor","setActor","error","setError","isLoading","setIsLoading","fetchActorDetails","response","fetch","process","env","REACT_APP_TMDB_KEY","ok","Error","actorData","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA/movies/src/pages/actorDetailsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ActorDetails from \"../components/actorDetails\";\nimport PageTemplate from \"../components/templateActorPage\";\n\nconst ActorDetailsPage = () => {\n  const { id } = useParams();\n  const [actor, setActor] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchActorDetails = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/person/${id}?api_key=${process.env.REACT_APP_TMDB_KEY}`\n        );\n        if (!response.ok) throw new Error(\"Failed to fetch actor details\");\n        const actorData = await response.json();\n        setActor(actorData);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchActorDetails();\n  }, [id]);\n\n  if (isLoading) return <p>Loading...</p>;\n  if (error) return <h1>{error}</h1>;\n\n  return actor ? (\n    <PageTemplate actor={actor}>\n      <ActorDetails actor={actor} />\n    </PageTemplate>\n  ) : (\n    <p>Waiting for actor details...</p>\n  );\n};\n\nexport default ActorDetailsPage;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,YAAY,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAC7B,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpCD,YAAY,CAAC,IAAI,CAAC;MAClBF,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAC1B,uCAAuCT,EAAE,YAAYU,OAAO,CAACC,GAAG,CAACC,kBAAkB,EACrF,CAAC;QACD,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;QAClE,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACvCd,QAAQ,CAACa,SAAS,CAAC;MACrB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZb,QAAQ,CAACa,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRZ,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDC,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC;EAER,IAAIK,SAAS,EAAE,oBAAOP,OAAA;IAAAqB,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACvC,IAAIpB,KAAK,EAAE,oBAAOL,OAAA;IAAAqB,QAAA,EAAKhB;EAAK;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAElC,OAAOtB,KAAK,gBACVH,OAAA,CAACF,YAAY;IAACK,KAAK,EAAEA,KAAM;IAAAkB,QAAA,eACzBrB,OAAA,CAACH,YAAY;MAACM,KAAK,EAAEA;IAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC,gBAEfzB,OAAA;IAAAqB,QAAA,EAAG;EAA4B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CACnC;AACH,CAAC;AAED,eAAexB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}