{"ast":null,"code":"var _jsxFileName = \"/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-5/movies/src/components/templateActorListPage/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"../headerActorList\";\nimport FilterActorsCard from \"../filterActorsCard\"; // For the name filter input\nimport ActorList from \"../actorList\"; // Displays the list of actors\nimport { getActors } from \"../../api/tmdb-api\"; // Fetching function\nimport Grid from \"@mui/material/Grid2\"; // Material UI Grid for layout\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ActorListPageTemplate({\n  title,\n  action\n}) {\n  const [actors, setActors] = useState([]); // State to store actors\n  const [nameFilter, setNameFilter] = useState(\"\"); // State to store name filter\n\n  useEffect(() => {\n    // Fetch the actors when the component mounts\n    getActors().then(data => setActors(data)) // Update state with actor data\n    .catch(error => console.error(\"Error fetching actors:\", error));\n  }, []); // Empty dependency array to run this effect once\n\n  const handleChange = (type, value) => {\n    if (type === \"name\") {\n      setNameFilter(value); // Update name filter value\n    }\n  };\n\n  // Filter actors based on the search filter\n  const displayedActors = actors.filter(actor => actor.name && actor.name.toLowerCase().includes(nameFilter.toLowerCase()) // Filter by name\n  );\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      size: 12,\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      sx: {\n        flex: \"1 1 500px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        size: {\n          xs: 10,\n          sm: 7,\n          md: 6,\n          lg: 3,\n          xl: 3\n        },\n        sx: {\n          padding: \"20px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(FilterActorsCard, {\n          onUserInput: handleChange // Passes the handleChange function to handle input changes\n          ,\n          nameFilter: nameFilter // Passes the current filter value to the card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, \"find\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActorList, {\n        action: action,\n        actors: displayedActors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\nexport default ActorListPageTemplate;","map":{"version":3,"names":["React","useState","useEffect","Header","FilterActorsCard","ActorList","getActors","Grid","jsxDEV","_jsxDEV","ActorListPageTemplate","title","action","actors","setActors","nameFilter","setNameFilter","then","data","catch","error","console","handleChange","type","value","displayedActors","filter","actor","name","toLowerCase","includes","container","children","size","fileName","_jsxFileName","lineNumber","columnNumber","sx","flex","xs","sm","md","lg","xl","padding","onUserInput"],"sources":["/Users/jorjaholland/Desktop/web app assignment /react-movie-labs/MoviesCA/MoviesCA-5/movies/src/components/templateActorListPage/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Header from \"../headerActorList\";\nimport FilterActorsCard from \"../filterActorsCard\"; // For the name filter input\nimport ActorList from \"../actorList\"; // Displays the list of actors\nimport { getActors } from \"../../api/tmdb-api\"; // Fetching function\nimport Grid from \"@mui/material/Grid2\"; // Material UI Grid for layout\n\nfunction ActorListPageTemplate({ title, action }) {\n  const [actors, setActors] = useState([]); // State to store actors\n  const [nameFilter, setNameFilter] = useState(\"\"); // State to store name filter\n\n  useEffect(() => {\n    // Fetch the actors when the component mounts\n    getActors()\n      .then((data) => setActors(data)) // Update state with actor data\n      .catch((error) => console.error(\"Error fetching actors:\", error));\n  }, []); // Empty dependency array to run this effect once\n\n  const handleChange = (type, value) => {\n    if (type === \"name\") {\n      setNameFilter(value); // Update name filter value\n    }\n  };\n\n  // Filter actors based on the search filter\n  const displayedActors = actors.filter((actor) =>\n    actor.name && actor.name.toLowerCase().includes(nameFilter.toLowerCase()) // Filter by name\n  );\n\n  return (\n    <Grid container>\n      <Grid size={12}>\n        <Header title={title} /> {/* Display title */}\n      </Grid>\n      <Grid container sx={{ flex: \"1 1 500px\" }}>\n        <Grid\n          key=\"find\"\n          size={{ xs: 10, sm: 7, md: 6, lg: 3, xl: 3 }}\n          sx={{ padding: \"20px\" }}\n        >\n          {/* FilterActorsCard handles user input for filtering actors */}\n          <FilterActorsCard\n            onUserInput={handleChange} // Passes the handleChange function to handle input changes\n            nameFilter={nameFilter} // Passes the current filter value to the card\n          />\n        </Grid>\n        {/* ActorList displays the filtered list of actors */}\n        <ActorList action={action} actors={displayedActors} />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default ActorListPageTemplate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}